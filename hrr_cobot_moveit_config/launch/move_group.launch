<?xml version="1.0"?>
<launch>
  <!--set parameters and configuration -->  
  <arg name="robot_ns"                    default="/" doc="robot namespace. Needed for moveit-controller manager"/>
  <arg name="allow_trajectory_execution"  default="true"/>
  <arg name="fake_execution"              default="false" doc="run fake controller instead of forwarding commands to actual robot controller"/>
  <arg name="fake_controllers_file"       default="$(find hrr_cobot_moveit_config)/name_specific_config/fake_controllers.yaml" doc="fake controllers (ignored if fake_execution is false!)"/>
  <arg name="ros_controllers_file"        default="$(find hrr_cobot_moveit_config)/name_specific_config/ros_controllers.yaml"  doc="ros controllers (ignored if fake_execution is true!)"/>  
  <arg name="debug"                       default="false"/>
  <arg name="max_safe_path_cost"          default="1"/>
  <arg name="jiggle_fraction"             default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="capabilities"                default=""/>  
  <arg name="moveit_controller_manager"   default="moveit_simple_controller_manager/MoveItSimpleControllerManager" /> 

  <!-- Verbose Mode Option -->
  <arg name="info"                        default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />
  <!-- move_group settings -->
  <!-- load these non-default MoveGroup capabilities (space seperated) -->
  <!--  <arg name="capabilities" value="a_package/AwsomeMotionPlanningCapability    another_package/GraspPlanningPipeline" /> -->    
  <!-- inhibit these default MoveGroup capabilities (space seperated) -->
  <arg name="disable_capabilities" value="
              move_group/MoveGroupKinematicsService
              move_group/ClearOctomapService
              "/>

  <group if="$(arg allow_trajectory_execution)">    
    <param name="trajectory_execution/allowed_execution_duration_scaling" value="1.2"/> 
    <!-- Allow more than the expected execution time before triggering a trajectory cancel (applied after scaling) -->
    <param name="trajectory_execution/allowed_goal_duration_margin" value="0.5"/> 
    <!-- Allowed joint-value tolerance for validation that trajectory's first point matches current robot state -->
    <param name="trajectory_execution/allowed_start_tolerance" value="0.01"/>
  </group>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost"         value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction"            value="$(arg jiggle_fraction)" />
    <param name="capabilities"               value="$(arg capabilities)"/>
    <param name="disable_capabilities"       value="$(arg disable_capabilities)"/>
    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />  
    <!-- Sensors Functionality -->
    <rosparam command="load" file="$(find hrr_cobot_moveit_config)/config/sensors_3d.yaml" />
    <param name="octomap_frame" type="string" value="world" /> -->
    <param name="octomap_resolution" type="double" value="0.001" />
    <param name="max_range" type="double" value="5.0"/>        
  </node>
  
   <!-- for Faked execution, spawn additional joint state remapper-->
   <node if="$(arg fake_execution)"
     name="joint_fake_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
     <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
   </node>
  
  <!-- load MoveIT ROS-Controller -->
  <group ns="move_group">
	  <group if="$(arg fake_execution)">
      <rosparam file="$(arg fake_controllers_file)"/>
      <param name="ros_control_namespace" value="$(arg robot_ns)"/>
      <param name="moveit_controller_manager" value="moveit_fake_controller_manager/MoveItFakeControllerManager"/>
    </group>
    <group unless="$(arg fake_execution)">
      <rosparam file="$(arg ros_controllers_file)"/>  	
      <param name="moveit_controller_manager" value="$(arg moveit_controller_manager)"/>  		
  	</group>
	</group>

</launch>
