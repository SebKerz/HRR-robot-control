<launch>
  
  <arg name="prefix" default="" doc="robot name. Requires a controllers_robot_nam.yaml file to exist"/>   
  <arg name="pipeline" default="ompl" doc="choose planning pipeline: OMPL, chomp, stomp"/>
  <arg name="debug" default="false" doc="enable debug output for movegroup"/>
  <arg name="use_moveit_ctrl_mngr" default="false" doc="enable noveit control manager"/>
  <arg name="fake_ctrl" default="false" doc="use fake controllers"/>

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt's "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->

  <!-- By default, use the urdf location provided from the package -->
  <!--arg name="urdf_path" default="$(find hrr_common)/description/sim_hrr_cobot.xacro"/>-->

  <!-- launch the gazebo simulator and spawn the robot -->
  <include file="$(find hrr_cobot_sim)/launch/gazebo.launch"/>
  <arg name="use_rviz" value="true"/>  
 
  <include file="$(find hrr_cobot_sim)/launch/spawn_hrr_cobot.launch"/>
  <arg name="wsg_version" value="1"/>

  <!--include file="$(find hrr_moveit_config)/launch/gazebo.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="urdf_path" value="$(arg urdf_path)"/>
  </include>-->

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find hrr_cobot_moveit_config)/launch/settings/planning_context.launch.xml">
    <arg name="gripper" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->

  <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node-->

  <!-- Given the published joint states, publish tf for the robot links -->
  <!--node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" /-->

  <!-- load planning pipeline of choice-->
  <include ns="move_group" file="$(find hrr_cobot_moveit_config)/launch/settings/$(arg pipeline).launch.xml"/>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find hrr_cobot_moveit_config)/launch/move_group.launch">
    <arg name="prefix" value="$(arg prefix)"/>
    <arg name="fake_execution" value="$(arg fake_ctrl)"/>
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>  

  <!-- Run Rviz and load the default config to see the state of the move_group node -->

  <!--include file="$(find hrr_moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find hrr_moveit_config)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>-->

  <!-- If database loading was enabled, start mongodb as well -->

  <!--include file="$(find hrr_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>-->

</launch>
