#!/usr/bin/env python
from __future__ import print_function
import os
import rospy
from std_msgs.msg import Bool
from std_srvs.srv import SetBool, SetBoolResponse
from hrr_common.ros_utils import *


rospy.init_node("RecordMaster")
bag_file_name = rospy.get_param("~bag_file_name", "Recording_")
trigger_topic = rospy.get_param("~trigger_topic", "/record_trigger")
trigger_srv_name = rospy.get_param("~trigger_service", "/record")


def get_data_dir():
    data_dir_param = rospy.get_param("~data_dir", "/tmp")
    if not os.path.exists(data_dir_param):
        try:
            os.mkdir(data_dir_param)
            rospy.loginfo(
                "created directory {} and saveing files to it".format(data_dir_param))
        except Exception as e:
            rospy.logerr("Could not create directory: {} due to exception:\n{}".format(
                data_dir_param, e))
            data_dir_param = os.getcwd()
            rospy.loginfo(
                "Will save data in current directory instead: {}".format(data_dir_param))
    return data_dir_param


rec_info = RecordData(get_data_dir(), bag_file_name)


def record_handler(msg):
    if msg.data:
        if rec_info.recording:
            return stop_ros_bag(rec_info)
        return start_ros_bag(rec_info)


def record_srv_handler(req):
    res = SetBoolResponse(success=False)
    if req.data and not rec_info.recording:
        start_ros_bag(rec_info)
        res.success = True
        res.message = "started rosbag recording %d" % rec_info.cnt
    elif rec_info.recording:
        stop_ros_bag(rec_info)
        res.success = True
        res.message ="stopped rosbag recording %d" % rec_info.cnt
    else:
        res.message = "desired mode is already set"
    return res


trigger_subs = rospy.Subscriber(trigger_topic, Bool, record_handler)
trigger_srv = rospy.Service(trigger_srv_name, SetBool, record_srv_handler)

while not rospy.is_shutdown():
    rospy.spin()
rospy.on_shutdown(goodbye)
